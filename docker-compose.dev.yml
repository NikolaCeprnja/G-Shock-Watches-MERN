name: g-shock-watches-dev
services:
  client:
    image: g-shock-watches/client:dev
    build:
      context: ./
      dockerfile: ./packages/client/Dockerfile
    ports:
      - 3000:3000
    working_dir: /usr/src/app
    container_name: g-shock-watches-client
    volumes:
      - ./packages/client:/usr/src/app
      - /usr/src/app/node_modules
      - node-vol:/usr/src/
    networks:
      - api-network
    depends_on:
      server:
        condition: service_started
  server:
    image: g-shock-watches/server:dev
    build:
      context: ./
      dockerfile: ./packages/server/Dockerfile
    ports:
      - 5000:5000
    working_dir: /usr/src/app
    container_name: g-shock-watches-server
    environment:
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ./packages/server:/usr/src/app
      - /usr/src/app/node_modules
      - node-vol:/usr/src/
    networks:
      - api-network
      - db-network
    depends_on:
      mongo:
        condition: service_healthy
  mongo:
    image: mongo:4.4.4
    ports:
      - 27017:27017
    container_name: mongo
    env_file: ./packages/server/.env_db
    restart: on-failure
    command: '--replSet rs0 --bind_ip_all --keyFile /db/mongodb_key.yml'
    healthcheck:
      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet) -eq 1
      interval: 10s
      start_period: 30s
    volumes:
      - ./packages/server/db:/db
      - mongo-vol:/data/db
    networks:
      - db-network

volumes:
  mongo-vol:
  node-vol:
    external: true
    name: root-node-vol

networks:
  api-network:
  db-network:
